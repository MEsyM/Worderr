generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  PLAYER
  HOST
  DIRECTOR
  ADMIN
}

enum RoomStatus {
  LOBBY
  ACTIVE
  COMPLETE
}

enum RoomRole {
  PLAYER
  DIRECTOR
  HOST
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole   @default(PLAYER)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  hostedRooms   Room[]     @relation("HostedRooms")
  turns         Turn[]     @relation("TurnAuthor")
  votes         Vote[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Room {
  id          String        @id @default(cuid())
  code        String        @unique
  title       String
  description String?
  status      RoomStatus    @default(LOBBY)
  hostId      String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  host        User?         @relation("HostedRooms", fields: [hostId], references: [id], onDelete: SetNull)
  memberships Membership[]
  turns       Turn[]
  summaries   Summary[]

  @@index([hostId])
}

model Membership {
  id        String    @id @default(cuid())
  userId    String
  roomId    String
  role      RoomRole  @default(PLAYER)
  joinedAt  DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@index([roomId])
  @@index([userId])
}

model Turn {
  id        String   @id @default(cuid())
  roomId    String
  authorId  String?
  round     Int
  prompt    String
  content   String?
  startedAt DateTime @default(now())
  endedAt   DateTime?
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  author    User?    @relation("TurnAuthor", fields: [authorId], references: [id], onDelete: SetNull)
  votes     Vote[]
  summary   Summary?

  @@unique([roomId, round])
  @@index([roomId])
  @@index([authorId])
}

model Vote {
  id        String   @id @default(cuid())
  turnId    String
  voterId   String
  value     Int
  createdAt DateTime @default(now())
  turn      Turn     @relation(fields: [turnId], references: [id], onDelete: Cascade)
  voter     User     @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([turnId, voterId])
  @@index([turnId])
  @@index([voterId])
}

model Summary {
  id        String   @id @default(cuid())
  roomId    String
  turnId    String?
  content   String
  createdAt DateTime @default(now())
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  turn      Turn?    @relation(fields: [turnId], references: [id], onDelete: SetNull)

  @@index([roomId])
  @@index([turnId])
}
